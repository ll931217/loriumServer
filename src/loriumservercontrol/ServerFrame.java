/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package loriumservercontrol;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author ll931217
 */
public class ServerFrame extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form ServerFrame
     */
    ServerSocket servSoc = null;
    boolean listening;
    public Thread runner;

    public ServerFrame() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server");

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnStop.setText("Stop");
        btnStop.setEnabled(false);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStop, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStart)
                    .addComponent(btnStop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        try {
            servSoc = new ServerSocket(16000);
            listening = true;
            lblStatus.setText("Started");
            btnStart.setEnabled(false);
            btnStop.setEnabled(true);
        } catch (IOException ioe) {
            System.out.println(ioe.toString());
            System.exit(1);
        }

        if (runner == null) {
            runner = new Thread(this);
            runner.start();
        }
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        try {
            listening = false;
            servSoc.close();
            lblStatus.setText("Stopped");
            btnStop.setEnabled(false);
            btnStart.setEnabled(true);
        } catch (IOException ioe) {
            System.out.println(ioe.toString());
        }
    }//GEN-LAST:event_btnStopActionPerformed

    public void run() {
        while (listening) {
            try {
                new Session(servSoc.accept());
            } catch (IOException ioe) {
                System.out.println(ioe.toString());
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JLabel lblStatus;
    // End of variables declaration//GEN-END:variables
}

class Session implements Runnable {

    Socket soc;
    BufferedReader br;
    PrintWriter pw;
    Thread runner;

    Session(Socket s) {
        soc = s;
        try {
            br = new BufferedReader(new InputStreamReader(soc.getInputStream()));
            pw = new PrintWriter(new BufferedOutputStream(soc.getOutputStream()), true);
        } catch (IOException ioe) {
            System.out.println(ioe.toString());
        }

        if (runner == null) {
            runner = new Thread(this);
            runner.start();
        }
    }

    public void run() {
        while (this.runner == Thread.currentThread()) {
            try {
                String input = this.br.readLine();
                if (input != null) {
                    Protocol prot = new Protocol();
                    String output = prot.processInput(input);
                    this.pw.println(output);
                    if (output.equals("Good Bye")) {
                        this.runner = null;
                        this.pw.close();
                        this.br.close();
                        this.soc.close();
                    }
                }
            } catch (IOException ie) {
                System.out.println(ie.toString());
            }
            try {
                Thread.sleep(10L);
            } catch (InterruptedException localInterruptedException) {
            }
        }
    }
}

/*The following are options that the client and the admin frames choose to do
 * a certain operation.
 */
class Protocol {

    Connection con;
    Statement st;

    public void connectDB()
            throws RemoteException {
        try {
            this.con = DriverManager.getConnection("jdbc:ucanaccess://C:/Lorium/Lorium.accdb;showschema=true");
        } catch (SQLException ex) {
            System.err.println("ConnectDB2 error " + ex);
        }
    }

    public String processInput(String input) {
        String[] info = input.split("#");
        String answer = "";
        switch (info[0]) {
            case "1":
                //retrieves all the messages for a certain user
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    int userID = Integer.parseInt(info[1]);

                    ResultSet rs = this.st.executeQuery("SELECT * FROM [user] INNER JOIN (room INNER JOIN message ON room.room_ID = message.room_ID) ON user.user_ID = room.user_ID WHERE user.user_ID = " + userID);
                    ResultSet count = this.st.executeQuery("SELECT COUNT (*) FROM [user] INNER JOIN (room INNER JOIN message ON room.room_ID = message.room_ID) ON user.user_ID = room.user_ID WHERE user.user_ID = " + userID);

                    count.next();
                    int rowTot = count.getInt(1);

                    answer = rowTot + "#";
                    while (rs.next()) {
                        answer = answer + rs.getInt("message_ID") + "#" + rs.getString("message_name") + "#" + rs.getString("sender") + "#";
                    }
                    this.st.close();
                    this.con.close();
                } catch (SQLException sqle) {
                    System.out.println("Error 1: " + sqle);
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "2":
                //checks if user account exists
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    String email = info[1];
                    String pass = info[2];

                    ResultSet res = this.st.executeQuery("SELECT * FROM user WHERE email_address = '" + email + "' AND password = '" + pass + "'");
                    if (res.next()) {
                        answer = "true";
                    } else {
                        answer = "false";
                    }
                    this.st.close();
                    this.con.close();
                } catch (SQLException sqle) {
                    System.out.println("Error 2: " + sqle);
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "3":
                //the message sender's name
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    String email = info[1];

                    ResultSet rs = this.st.executeQuery("SELECT * FROM message WHERE email = '" + email + "'");
                    if (rs.next()) {
                        answer = rs.getString("sender");
                    }
                    this.st.close();
                } catch (SQLException sqle) {
                    System.out.println("Error 3: " + sqle);
                    JOptionPane.showMessageDialog(null, "SQL Error " + sqle);
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "4":
                //retrieves the username of a certain user
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    String email = info[1];

                    ResultSet res = this.st.executeQuery("SELECT * FROM user WHERE email_address = '" + email + "'");
                    if (res.next()) {
                        answer = res.getString("username");
                    }
                    this.st.close();
                } catch (SQLException sqle) {
                    System.out.println("Error 4: " + sqle);
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "5":
                //gets the number of replies and messages for a certain user
                try {
                    connectDB();
                    this.st = this.con.createStatement(1004, 1007);
                    Statement statement1 = this.con.createStatement(1004, 1007);
                    Statement statement2 = this.con.createStatement(1004, 1007);
                    String email = info[1];
                    ResultSet rep = statement1.executeQuery("SELECT COUNT (*) FROM reply WHERE email = '" + email + "'");
                    ResultSet top = statement2.executeQuery("SELECT COUNT (*) FROM message WHERE email = '" + email + "'");
                    rep.last();
                    int reps = rep.getRow();
                    rep.beforeFirst();
                    top.last();
                    int tops = top.getRow();
                    top.beforeFirst();
                    answer = Integer.toString(reps + tops);
                    this.st.close();
                } catch (SQLException sqle) {
                    System.out.println("Error 5: " + sqle);
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "6":
                //checks if the user is an admin or tenant
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    String email = info[1];

                    ResultSet res = this.st.executeQuery("SELECT * FROM user WHERE email_address = '" + email + "'");
                    while (res.next()) {
                        answer = res.getString("user_type");
                    }
                    this.st.close();
                } catch (SQLException sqle) {
                    System.out.println("Error 6: " + sqle);
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "7":
                //retrieves the user's security question
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    String email = info[1];

                    ResultSet rs = this.st.executeQuery("SELECT question FROM secret WHERE secret_ID = (SELECT security_q_no FROM user WHERE email_address = '" + email + "')");
                    if (rs.next()) {
                        answer = rs.getString("question");
                    }
                    this.st.close();
                } catch (SQLException e) {
                    System.out.println("Error 7: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "8":
                //retrieves the security answer for a certain user
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    String email = info[1];

                    ResultSet rs = this.st.executeQuery("SELECT security_q_ans FROM user WHERE email_address = '" + email + "'");
                    if (rs.next()) {
                        answer = rs.getString("security_q_ans");
                    }
                    this.st.close();
                } catch (SQLException e) {
                    System.out.println("Error 8: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "9":
                //retrieve's the user ID of either the tenant or admin
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    String email = info[1];
                    String aType = info[2];
                    System.out.println("email: " + email);
                    
                    ResultSet rs = this.st.executeQuery("SELECT * FROM [user] WHERE email_address = '" + email + "'");
                    if (rs.next()) {
                        answer = answer + rs.getInt("user_ID");
                        System.out.println("USERID: " + answer);
                    }
                    
                    this.st.close();
                } catch (SQLException e) {
                    System.out.println("Error 9: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "10":
                //retrieves the profile pic location
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    String email = info[1];

                    ResultSet rs = this.st.executeQuery("SELECT user.pic_location FROM [user] WHERE user.email_address = '" + email + "'");
                    if (rs.next()) {
                        answer = rs.getString("user.pic_location");
                    }
                    this.st.close();
                } catch (SQLException e) {
                    System.out.println("Error 10: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "11":
                //retrieves the details of a certain notice on the noticeboard
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    String noticeID = info[1];

                    ResultSet rs = this.st.executeQuery("SELECT notice.title, notice.description FROM notice WHERE notice.notice_ID = " + noticeID);
                    if (rs.next()) {
                        System.out.println("description: " + rs.getString("description"));
                        answer = rs.getString("title") + "#" + rs.getString("description") + "#";
                    }
                    while (rs.next()) {
                        answer = answer + rs.getString("description") + "#";
                    }
                    System.out.println("notice answer: " + answer);
                    this.st.close();
                } catch (SQLException e) {
                    System.out.println("Error 11: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "12":
                //gets all the noticeboard information from the database
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    ResultSet rs = this.st.executeQuery("SELECT * FROM notice");
                    ResultSet ts = this.st.executeQuery("SELECT COUNT (*) FROM notice");

                    ts.next();
                    int rowTot = ts.getInt(1);
                    while (rs.next()) {
                        answer = answer + rs.getInt("notice_ID") + "#" + rs.getString("title") + "#" + rowTot + "#";
                    }
                    this.st.close();
                } catch (SQLException e) {
                    System.out.println("Error 12: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "13":
                //retrieves the message details
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    String id = info[1];
                    ResultSet rs = this.st.executeQuery("SELECT * FROM message WHERE message_ID = " + id);
                    if (rs.next()) {
                        answer = rs.getString("message_name") + "#" + rs.getString("description") + "#" + rs.getString("sender") + "#";
                    }
                    this.st.close();
                } catch (SQLException e) {
                    System.out.println("Error 13: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "14":
                //sends a message to a certain user
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    String from = "";
                    String to = info[2];
                    String name = info[3];
                    String area = info[4];
                    String email = info[1];
                    int rid = 0;
                    int uid = 0;

                    ResultSet e = this.st.executeQuery("SELECT * FROM user WHERE email_address = '" + email + "'");
                    if (e.next()) {
                        from = e.getString("username");
                        System.out.println("username: " + from);
                    }
                    ResultSet u = this.st.executeQuery("SELECT user_ID FROM user WHERE user.username = '" + to + "'");
                    if (u.next()) {
                        uid = u.getInt("user_ID");
                        System.out.println("user_ID: " + uid);
                    }
                    ResultSet r = this.st.executeQuery("SELECT room.room_ID FROM room WHERE room.user_ID = " + uid);
                    if (r.next()) {
                        rid = r.getInt("room_ID");
                        System.out.println("room_ID: " + rid);
                    }
                    String update = "INSERT INTO message(message_name, description, sender, email, room_ID) VALUES ('" + name + "','" + area + "','" + from + "','" + email + "'," + rid + ")";
                    System.out.println("update: " + update);
                    this.st.executeUpdate(update);

                    this.st.close();
                } catch (SQLException e) {
                    System.out.println("Error 14: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "15":
                //change the cost of a tenant
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    String rid = info[1];
                    String water = info[2];
                    String power = info[3];
                    String ou = info[4];

                    String update = "UPDATE room SET kilolitres = " + water + ", kilowatts = " + power + ", minutes_out = " + ou + " WHERE room_ID = " + rid;
                    this.st.executeUpdate(update);

                    this.st.close();
                } catch (SQLException e) {
                    System.out.println("Error 15: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "16":
                //retrieves the room_ID of all the rooms that are available
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    ResultSet rs = this.st.executeQuery("SELECT * FROM room WHERE room.[room_available] = true");
                    ResultSet count = this.st.executeQuery("SELECT COUNT(*) FROM room WHERE room.[room_available] = true");

                    count.next();
                    int rowTot = count.getInt(1);
                    answer = String.valueOf(rowTot) + "#";
                    while (rs.next()) {
                        answer = answer + rs.getInt("room_ID") + "#";
                    }

                    this.st.close();
                } catch (SQLException e) {
                    System.out.println("Error 16: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "17":
                //retrieves the secret questions from the database
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    ResultSet rs = this.st.executeQuery("SELECT * FROM secret");
                    ResultSet count = this.st.executeQuery("SELECT COUNT(*) FROM secret");

                    count.next();
                    int rowTot = count.getInt(1);
                    answer = rowTot + "#";
                    while (rs.next()) {
                        answer = answer + rs.getString("question") + "#";
                    }
                    //System.out.println("answer 17: " + answer);

                    this.st.close();
                } catch (SQLException e) {
                    System.out.println("Error 17: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "18":
                //checks if the user's account exists
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    String email = info[1];

                    ResultSet rs = this.st.executeQuery("SELECT * FROM user WHERE email_address = '" + email + "'");
                    if (rs.next()) {
                        answer = "true";
                    }
                    this.st.close();
                } catch (SQLException e) {
                    System.out.println("Error 18: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "19":
                //change the fees for a certain room
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    String user_email = info[1];
                    String room_ID = info[2];
                    String user_password = info[3];
                    String user_question_ID = info[4];
                    String user_answer = info[5];
                    String user_name = info[6];

                    this.st.executeUpdate("INSERT INTO user(email_address, password, security_q_no, security_q_ans, username, user_type, pic_location)VALUES('" + user_email + "', '" + user_password + "', " + user_question_ID + ", '" + user_answer + "', '" + user_name + "', 'T', 'default.jpg')");

                    ResultSet rs = this.st.executeQuery("SELECT user_ID FROM user WHERE email_address = '" + user_email + "'");
                    int ids = 0;
                    if (rs.next()) {
                        ids = rs.getInt("user_ID");
                    }
                    this.st.executeUpdate("UPDATE room SET user_ID = " + ids + ", kilolitres = 0, kilowatts = 0, minutes_out = 0, room_available = 0 WHERE room_ID = " + room_ID);

                    this.st.close();
                } catch (SQLException e) {
                    System.out.println("Error 19: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "20":
                //used for updating the database or deleting something from the database
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    String query = info[1];
                    
                    System.out.println("query 20: " + query);

                    this.st.executeUpdate(query);

                    this.st.close();
                } catch (SQLException e) {
                    System.out.println("Error 20: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "21":
                //used to check if an entry exists in the database
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    String query = info[1];

                    ResultSet rs = this.st.executeQuery(query);
                    if (rs.next()) {
                        answer = "true";
                    }
                    this.st.close();
                } catch (SQLException e) {
                    System.out.println("Error 21: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "22":
                //used to retrieve a question from the database
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    String query = info[1];

                    ResultSet rs = this.st.executeQuery(query);
                    if (rs.next()) {
                        answer = rs.getString("question");
                    }
                    this.st.close();
                } catch (SQLException e) {
                    System.out.println("Error 22: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "23":
                //used to retrieve the security answer of the user
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    String query = info[1];

                    ResultSet rs = this.st.executeQuery(query);
                    if (rs.next()) {
                        answer = rs.getString("security_q_ans");
                    }
                    this.st.close();
                } catch (SQLException e) {
                    System.out.println("Error 23: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "24":
                //used to calculate the user's expenditure
                try {
                    connectDB();
                    this.st = this.con.createStatement();

                    String query = info[1];

                    double outRates = 0.0D;
                    double inRates = 0.0D;
                    double totMin = 43829.0D;
                    double water = 0.0D;
                    double electricity = 0.0D;

                    ResultSet r = this.st.executeQuery("SELECT * FROM rates WHERE rate_ID = 1");
                    if (r.next()) {
                        outRates = r.getDouble("out_rate");
                        System.out.println("out_rate: " + outRates);
                        inRates = r.getDouble("in_rate");
                        System.out.println("in_rate: " + inRates);
                        water = r.getDouble("water");
                        System.out.println("water: " + water);
                        electricity = r.getDouble("electricity");
                        System.out.println("electricity: " + electricity);
                    }
                    DecimalFormat df = new DecimalFormat("#.##");
                    DecimalFormat dfs = new DecimalFormat("#");
                    double litres = 0.0D;
                    double kwh = 0.0D;
                    double out = 0.0D;
                    double in = 0.0D;
                    double totUtil = 0.0D;
                    double total = 0.0D;

                    ResultSet rs = this.st.executeQuery(query);
                    if (rs.next()) {
                        out = rs.getInt("minutes_out");
                        kwh = rs.getInt("kilowatts");
                        litres = rs.getInt("kilolitres");

                        in = totMin - out;
                        totUtil = litres * water + kwh * electricity;
                        total = litres * water + kwh * electricity + totMin * outRates + in * inRates;
                        answer = dfs.format(out) + "#" + df.format(totUtil) + "#" + df.format(total) + "#";
                    }
                    this.st.close();
                } catch (SQLException e) {
                    System.out.println("Error 24: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "25":
                //retrieves the email address of a user
                try {
                    connectDB();
                    this.st = this.con.createStatement();
                    
                    String username = info[1];
                    
                    ResultSet rs = st.executeQuery("SELECT email_address FROM user WHERE username = '" + username + "'");
                    
                    if (rs.next()) {
                        answer = rs.getString("email_address");
                    }
                    
                    st.close();
                } catch (SQLException e) {
                    System.out.println("Error 25: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
            break;
            case "26":
                //retrives the user_ID of all tenants
                try{
                    connectDB();
                    this.st = this.con.createStatement();
                    answer = "";
                    
                    ResultSet rs = st.executeQuery("SELECT * FROM user WHERE user_type = 'T'");
                    
                    while (rs.next()) {
                        ResultSet rs1 = st.executeQuery("SELECT * FROM user, room WHERE room.user_ID = " + rs.getInt("user_ID") + " AND room.user_ID = user.user_ID");
                    
                        if (rs1.next()) {
                            answer = answer + rs1.getInt("room_ID") + "#" + rs1.getString("username") + "#" + rs1.getFloat("kilolitres") + "#" + rs1.getFloat("kilowatts") + "#" + rs1.getInt("minutes_out") + "#" + rs1.getBoolean("room_available") + "#";
                        }
                    }
                    ResultSet rs2 = st.executeQuery("SELECT * FROM room WHERE room_available = true");
                    
                    while (rs2.next()) {
                        answer = answer + rs2.getInt("room_ID") + "#" + rs2.getInt("user_ID") + "#" + rs2.getFloat("kilolitres") + "#" + rs2.getFloat("kilowatts") + "#" + rs2.getInt("minutes_out") + "#" + rs2.getBoolean("room_available") + "#";
                    }
                    System.out.println("answer: " + answer);
                    st.close();
                } catch (SQLException e) {
                    System.out.println("Error 26: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
            break;
            case "27":
                try {
                    connectDB();
                    st = con.createStatement();
                    answer = "";
                    
                    ResultSet rs = st.executeQuery("SELECT * FROM rates");
                    
                    if (rs.next()) {
                        answer = rs.getFloat("in_rate") + "#" + rs.getFloat("out_rate") + "#" + rs.getFloat("water") + "#" + rs.getFloat("electricity") + "#";
                    }
                    st.close();
                } catch (SQLException e) {
                    System.out.println("Error 27: " + e.toString());
                } catch (RemoteException ex) {
                    Logger.getLogger(Protocol.class.getName()).log(Level.SEVERE, null, ex);
                }
            break;
        }
        return answer;
    }
}
